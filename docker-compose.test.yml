services:
  api-gateway:
    container_name: api-gateway-service_articles-platform_test
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - '${HOST_PORT_API_GATEWAY}:${CONTAINER_PORT_API_GATEWAY}'
    env_file:
      - ./api-gateway/config/.env.test
    environment:
      NODE_ENV: test
    command: npm run start:test
    depends_on:
      article-service:
        condition: service_started
      log-service:
        condition: service_started
      search-service:
        condition: service_started
    restart: no
    networks:
      - test-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://api-gateway:3000/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10


  article-service:
    container_name: article-service_articles-platform_test
    build:
      context: ./articles-service
      dockerfile: Dockerfile
    expose:
      - '${CONTAINER_PORT_ARTICLE_SERVICE}'
    env_file:
      - ./articles-service/config/.env.test
    environment:
      NODE_ENV: test
    depends_on:
      kafka:
        condition: service_healthy
      article-service-db:
        condition: service_started
    command: npm run start:test
    restart: unless-stopped
    networks:
      - test-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://article-service:3001/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10


  log-service:
    container_name: log-service_articles-platform_test
    build:
      context: ./log-service
      dockerfile: Dockerfile
    expose:
      - '${CONTAINER_PORT_LOG_SERVICE}'
    env_file:
      - ./log-service/config/.env.test
    environment:
      NODE_ENV: test
    depends_on:
      kafka:
        condition: service_healthy
      log-service-db:
        condition: service_started
    command: npm run start:test
    restart: unless-stopped
    networks:
      - test-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://log-service:3002/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10


  search-service:
    container_name: search-service_articles-platform_test
    build:
      context: ./search-service
      dockerfile: Dockerfile
    expose:
      - '${CONTAINER_PORT_SEARCH_SERVICE}'
    env_file:
      - ./search-service/config/.env.test
    environment:
      NODE_ENV: test
    depends_on:
      kafka:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    command: npm run start:test
    restart: unless-stopped
    networks:
      - test-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://search-service:3003/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10


  article-service-db:
    container_name: article-service-database_articles-platform_test
    image: postgres
    ports:
      - '5432:5432'
    volumes:
      - article_db_test_data:/var/lib/postgresql/data
    env_file:
      - ./articles-service/config/.env.test
    restart: unless-stopped
    networks:
      - test-network


  log-service-db:
    container_name: log-service-database_articles-platform_test
    image: postgres
    ports:
      - '5433:5432'
    volumes:
      - log_db_test_data:/var/lib/postgresql/data
    env_file:
      - ./log-service/config/.env.test
    restart: unless-stopped
    networks:
      - test-network


  kafka:
    image: bitnami/kafka:latest
    container_name: kafka-service_articles-platform_test
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - BITNAMI_DEBUG=yes
      - KAFKAJS_NO_PARTITIONER_WARNING=1
      - KAFKA_ENABLE_KRAFT=yes
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://kafka:9094
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_KRAFT_CLUSTER_ID=d9f4b3c5-80d3-4a8f-b1ad-555e19186e61
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
    volumes:
      - kafka_test_data:/bitnami/kafka
    healthcheck:
      test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - test-network


  elasticsearch:
    container_name: elasticsearch-service_articles-platform_test
    image: elasticsearch:9.0.3
    ports:
      - 9300:9300
      - 9200:9200
    volumes:
      - elasticsearch_test_data:/usr/share/elasticsearch/data
    env_file:
      - ./search-service/config/.env.test
    environment:
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    healthcheck:
      test: [ "CMD-SHELL", "curl -s http://localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - test-network

volumes:
  article_db_test_data:
  log_db_test_data:
  kafka_test_data:
  elasticsearch_test_data:

networks:
  test-network:
    driver: bridge